import React, { Component } from "react";
import Container from "@material-ui/core/Container";
import RouteDetail from "./RouteDetail";
import {makeStyles} from "@material-ui/core/styles";
import Timeline from '@material-ui/lab/Timeline';
import TimelineItem from '@material-ui/lab/TimelineItem';
import TimelineSeparator from '@material-ui/lab/TimelineSeparator';
import TimelineConnector from '@material-ui/lab/TimelineConnector';
import TimelineContent from '@material-ui/lab/TimelineContent';
import TimelineOppositeContent from '@material-ui/lab/TimelineOppositeContent';
import TimelineDot from '@material-ui/lab/TimelineDot';
import GridListTile from "@material-ui/core/GridListTile";
import Typography from "@material-ui/core/Typography";
import GridList from "@material-ui/core/GridList";
import Paper from '@material-ui/core/Paper';


class RouteTimeline extends React.Component{
    constructor(props) {
        super(props);
        this.state = {
            error: null,
            isLoaded: false,
            items: []
        };        
    }
    
    componentDidMount() {
        fetch("http://localhost:31192/api/v2/public/RoutePoints?pageSize=1000&range=[0,9]&filter={'routeId':'" + this.props.match.params.routeId + "'}")
            .then(res => res.json())
            .then(
                (result) => {
                    this.setState({
                        isLoaded: true,
                        items: result
                    })
                },
                // Примечание: важно обрабатывать ошибки именно здесь, а не в блоке catch(),
                // чтобы не перехватывать исключения из ошибок в самих компонентах.
                (error) => {
                    this.setState({
                        isLoaded: true,
                        error
                    });
                }
            )
    }

    render() {
        //var testarr = ["https://igosh.pro/shared/img_7bc836d0-4b6f-4714-a3f8-10121636c53c.jpg", "https://igosh.pro/shared/img_972c4daf-1f31-4a2d-9ad1-4178fed0d5d3.jpg", "https://igosh.pro/shared/img_c531f466-6e2a-48a8-b391-dffcdc490d90.jpg","https://igosh.pro/shared/img_f4195e07-9ca8-46a0-b5c2-41611b0a74cf.jpg"];
        const useStyles = makeStyles((theme) => ({
            paper: {
                padding: '6px 16px',
            },
            secondaryTail: {
                backgroundColor: theme.palette.secondary.main,
            },
        }));
        const { error, isLoaded, items } = this.state;
        //alert(this.images);
        if (error) {
            return <div>Ошибка: {error.message}</div>;
        } else if (!isLoaded) {
            return <div>Загрузка...</div>;
        } else
        return (
            <Timeline align="alternate">
                {items.map((item) => (
                    <TimelineItem key={item.routePointId}>
                        <TimelineOppositeContent>
                            <Typography variant="body2" color="textSecondary">
                                {item.createDate}
                            </Typography>
                        </TimelineOppositeContent>
                        <TimelineSeparator>
                            <TimelineDot />
                            <TimelineConnector />
                        </TimelineSeparator>
                        <TimelineContent>
                            <Paper elevation={3}>
                                <Typography variant="h6" component="h1">
                                    {item.name}
                                </Typography>
                                <Typography variant="body2" color="textSecondary">...</Typography>
                                <GridList cols={20} cellHeight={100} cellWidth={100}>
                                    {item.medias.map((imgitem) => (
                                        <GridListTile key={imgitem} cols={4}>
                                            <img src={imgitem.url} alt={imgitem.url} />
                                        </GridListTile>
                                    ))}
                                </GridList>
                            </Paper>
                        </TimelineContent>
                    </TimelineItem>
                ))}
            </Timeline>
        );
    }
}

export default RouteTimeline;